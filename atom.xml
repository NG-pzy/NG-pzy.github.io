<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PZY＇s Blog</title>
  
  <subtitle>苟活者在淡红的血色中，会依稀看见微茫的希望；真的猛士，将更奋然而前行。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-07T15:53:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>pzy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/12/hello-world/"/>
    <id>http://yoursite.com/2019/09/12/hello-world/</id>
    <published>2019-09-12T05:45:01.019Z</published>
    <updated>2019-07-07T15:53:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. </p><a id="more"></a><p>Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>同余定理证明</title>
    <link href="http://yoursite.com/2019/07/09/%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E/"/>
    <id>http://yoursite.com/2019/07/09/同余定理证明/</id>
    <published>2019-07-09T06:11:46.000Z</published>
    <updated>2019-07-09T06:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>费马小定理、欧拉定理</p><a id="more"></a><p><img src="https://s1.ax1x.com/2018/10/30/iR90p9.png" alt></p><p><img src="https://s1.ax1x.com/2018/10/30/iR9D61.png" alt></p><p><img src="https://s1.ax1x.com/2018/10/30/iR9aY4.png" alt></p><p><img src="https://s1.ax1x.com/2018/10/30/iR9tTU.png" alt></p><p><img src="https://s1.ax1x.com/2018/10/30/iR9UkF.png" alt></p><p><img src="https://s1.ax1x.com/2018/10/30/iR9BlR.png" alt></p><p><img src="https://s1.ax1x.com/2018/10/30/iR9dfJ.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;费马小定理、欧拉定理&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学，同余" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E5%90%8C%E4%BD%99/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Miller-Robbin 与 Pollard Rho</title>
    <link href="http://yoursite.com/2019/07/09/%E6%B5%85%E8%B0%88-Miller-Robbin-%E4%B8%8E-Pollard-Rho/"/>
    <id>http://yoursite.com/2019/07/09/浅谈-Miller-Robbin-与-Pollard-Rho/</id>
    <published>2019-07-08T16:04:44.000Z</published>
    <updated>2019-07-10T17:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>$\text{Miller-Robbin}$ 与 $\text{Pollard Rho}$ 虽然都是随机算法，不过用起来是真的爽。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>$Miller-Robbin$ 算法是一种高效的质数判断方法。虽然是一种不确定的质数判断法，但是在选择多种底数的情况下，正确率是可以接受的。</p><p>$Pollard Rho$ 是一个非常玄学的方式，用于在 $O(n^{1/4})$ 的期望时间复杂度内计算合数$n$的某个非平凡因子。事实上算法导论给出的是 $O(\sqrt p)$ ， $p$ 是 $n$ 的某个最小因子，满足 $p$ 与 $\frac{n}{p}$ 互质。</p><p>但是这些都是期望，未必符合实际。但事实上 $Pollard Rho$ 算法在实际环境中运行的相当不错。注：以上摘自某谷。</p><h1 id="Miller-Robbin"><a href="#Miller-Robbin" class="headerlink" title="Miller-Robbin"></a>Miller-Robbin</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><ol><li>费马小定理</li></ol><ul><li><p>内容：若 $\varphi(p)=p-1,\,p&gt;1$，则$a^{p}\equiv a\pmod{p}$     或      $a^{p-1}\equiv 1\pmod{p},\,(a&lt;p)$</p></li><li><p>证明：<a href="https://ng-pzy.github.io/2019/07/09/%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E/#more" target="_blank" rel="noopener">戳这里</a></p></li></ul><ol><li>二次探测定理</li></ol><ul><li><p>内容：如果 $\varphi(p)=p-1,\,p&gt;1,\,p&gt;X$ ，且$X^2\equiv 1\pmod{p}$，那么X=1 or p-1$</p></li><li><p>证明：</p></li></ul><p>$\because$ $X^2\equiv 1\pmod{p}$</p><p>$\therefore$ $p|X^2-1$</p><p>$\therefore$ $p|(X+1)(X-1)$</p><p>$\because$ $p$是大于$X$的质数</p><p>$\therefore$ $p=X+1\,\, or ,\,p\equiv X-1\pmod{p}$，即$X=1 or p-1$。</p><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>由费马小定理，我们可以有一个大胆的想法：满足 $a^{p-1}\equiv 1\pmod{p}$ 的数字 $p$ 是一个质数。<br>可惜，这样的猜想是错误的，可以举出大量反例，如：$2^{340}\equiv 1\pmod{341}$，然鹅 $341=31 \times 11$ 。<br>所以，我们可以取不同的 $a$ 多验证几次，不过，$\forall a&lt;561,\,a^{560}\equiv 1\pmod{561}$，然鹅 $561=51 \times 11$ 。<br>这时，二次探测就有很大的用途了。结合费马小定理，正确率就相当高了。<br>这里推荐几个 $a_i$ 的值： $2，3，5，7，11，61，13，17$。用了这几个 $a_i$，就连那个被称为强伪素数的 $46856248255981$ 都能被除去。</p><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol><li><p>将 $p-1$ 提取出所有 $2$ 的因数，假设有$s$ 个。设剩下的部分为 $d$（这里提取所有$2$的因数，<strong>是为了下面应用二次探测定理</strong>） 。</p></li><li><p>枚举一个底数 $a_i$ 并计算 $x=a_i^{d}\pmod p$。</p></li><li><p>令 $y=x^{2}\pmod p$，如果没有出现过 $p-1$，那么 $p$ 未通过二次探测，不是质数。</p></li><li><p>否则，若底数已经足够，则跳出；否则回到第二步。</p></li></ol><h2 id="简易代码"><a href="#简易代码" class="headerlink" title="简易代码"></a>简易代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll p,a[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">61</span>,<span class="number">13</span>,<span class="number">17</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=b;i;i&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=(ans+a)%p;</span><br><span class="line">        a=(a&lt;&lt;<span class="number">1</span>)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=b;i;i&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=mul(ans,a,p);</span><br><span class="line">        a=mul(a,a,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Robbin</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">1</span> || !(p%<span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">ll d=p<span class="number">-1</span>;<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(d&amp;<span class="number">1</span>)) d&gt;&gt;=<span class="number">1</span>,++s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">8</span> &amp;&amp; a[i]&lt;p;++i)</span><br><span class="line">&#123;</span><br><span class="line">ll x=Pow(a[i],d,p),y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s;++j)</span><br><span class="line">&#123;</span><br><span class="line">y=mul(x,x,p);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span> &amp;&amp; x!=<span class="number">1</span> &amp;&amp; x!=(p<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pollard-Rho"><a href="#Pollard-Rho" class="headerlink" title="Pollard Rho"></a>Pollard Rho</h1><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ul><li><p>先判断当前数是否是素数（这里就可应用 $Miller-Robbin$ ），如果是则直接返回</p></li><li><p>如果不是素数的话，试图找到当前数的一个因子（可以不是质因子）</p></li><li><p>递归对该因子和约去这个因子的另一个因子进行分解</p></li></ul><h2 id="如何找因子"><a href="#如何找因子" class="headerlink" title="如何找因子"></a>如何找因子</h2><p>一个一个试肯定是不行的。而这个算法的发明者采取了一种清奇的思路。（即采取随机化算法）</p><ul><li>我们假设要找的因子为p</li><li>随机取一个 $x、y$，不断调整 $x$ ，具体的办法通常是 $x=x*x+c$（c是随机的，也可以自己定）</li><li>取 $p=gcd(y-x,n)$ ，若$p \in \left(1,n\right)$ ，则找到了一个因子，就返回。</li><li><p>如果出现 $x=y$ 的循环，就说明出现了循环，并不断在这个环上生成以前生成过一次的数，所以我们必须写点东西来判环：我们可以用<strong>倍增</strong>的思想，让$y$记住$x$的位置，然后$x$再跑当前跑过次数的一倍的次数。这样不断让$y$<strong>记住</strong>$x$的位置，x再往下跑，因为<strong>倍增所以当$x$跑到$y$时，已经跑完一个圈</strong>。</p></li><li><p>同时最开始设定两个执行次数$i=1、k=2$（即倍增的时候用） ，每次取 $gcd$ 时 $++i$ ；如果 $i==k$ ，则令 $y=x$ ，并将 $k$ 翻倍。</p></li></ul><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><ul><li>题目：<a href="https://www.luogu.org/problemnew/show/P4718" target="_blank" rel="noopener">$Luogu4718 Pollard-Rho$算法</a> 。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V inline void</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I inline int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B inline bool</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F1(i,a,b) for(rg i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F3(i,a,b,c) for(rg i=a;i&lt;=b;i+=c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ed putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bl putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function">V <span class="title">read</span><span class="params">(TP &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TP f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">register</span> <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">for</span>(;c&gt;<span class="string">'9'</span>||c&lt;<span class="string">'0'</span>;c=getchar()) <span class="keyword">if</span>(c==<span class="string">'-'</span>) f=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function">V <span class="title">print</span><span class="params">(TP x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) print(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll n,ans;</span><br><span class="line">ll a[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">61</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">24251</span>&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> ll <span class="title">Gcd</span><span class="params">(TP a,TP b)</span> </span>&#123;<span class="keyword">return</span> !b?a:Gcd(b,a%b);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(TP a,TP b,TP p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(TP i=b;i;i&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=(ans+a)%p;</span><br><span class="line">        a=(a&lt;&lt;<span class="number">1</span>)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(TP a,TP b,TP p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(TP i=b;i;i&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=mul(ans,a,p);</span><br><span class="line">a=mul(a,a,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">B <span class="title">Miller_Robbin</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">ll d=n<span class="number">-1</span>;<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(d&amp;<span class="number">1</span>)) d&gt;&gt;=<span class="number">1</span>,++s;</span><br><span class="line"><span class="keyword">for</span>(rg i=<span class="number">0</span>;i&lt;=<span class="number">8</span> &amp;&amp; a[i]&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ll x=Pow(a[i],d,n),y=<span class="number">0</span>;</span><br><span class="line">F1(j,<span class="number">0</span>,s<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">y=mul(x,x,n);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span> &amp;&amp; x!=<span class="number">1</span> &amp;&amp; x!=(n<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pollard_Rho</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll x,y,c,i,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">ll x=rand()%(n<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">ll y=rand()%(n<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">ll c=rand()%(n<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">i=<span class="number">0</span>,k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(++i)</span><br><span class="line">&#123;</span><br><span class="line">x=(mul(x,x,n)+c)%n;</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">break</span>;</span><br><span class="line">ll d=Gcd(<span class="built_in">abs</span>(y-x),n);</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line"><span class="keyword">if</span>(i==k) &#123;y=x;k&lt;&lt;=<span class="number">1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">V <span class="title">Find</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(Miller_Robbin(n)) &#123;ans=max(ans,n);<span class="keyword">return</span>;&#125;</span><br><span class="line">ll p=n;</span><br><span class="line"><span class="keyword">while</span>(n&lt;=p) p=Pollard_Rho(p);</span><br><span class="line">Find(p);Find(n/p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(T);srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">read(n);Find(n);</span><br><span class="line"><span class="keyword">if</span>(ans==n) <span class="built_in">puts</span>(<span class="string">"Prime"</span>);</span><br><span class="line"><span class="keyword">else</span> print(ans),ed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emmmm $\cdots$ </p><p><img src="https://s2.ax1x.com/2019/03/30/ADF7ng.png" alt><br>这数据也太毒瘤了吧！！   看来要疯狂<del>卡常</del>了</p><h2 id="优化1（不如叫做卡常？）"><a href="#优化1（不如叫做卡常？）" class="headerlink" title="优化1（不如叫做卡常？）"></a>优化1（不如叫做卡常？）</h2><p>蛋定的分析一波，我们发现除了 $Pollard-Rho$ 是 $O(n^{1/4})$ 的期望时间复杂度外， $gcd$ 和龟速乘都是 $O(\log N)$ 的。</p><p>虽然这种复杂度已经很<del>优秀</del>了，可对于本题的数据（$T≤350$ 、 $1≤n≤10^{18}$），还是太 $\cdots$ </p><p>所以我们要果断摒弃这种很 $low$ 的龟速乘，改用一种暴力溢出的快速乘：</p><ul><li><p>简单原理： $a \times b   mod   p=a \times b−\left \lfloor \frac{a \times b}{p} \right \rfloor$</p></li><li><p>用<code> long double </code>来处理这个 $\left \lfloor \frac{a \times b}{p} \right \rfloor$</p></li><li><p>然后处理一下浮点误差就可以了。</p></li><li><p>模数较大时可能会出锅。</p></li><li><p>不过出锅概率很小 $\cdots$</p></li></ul><p>如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a%=mod,b%=mod;</span><br><span class="line">ll c=(<span class="keyword">long</span> <span class="keyword">double</span>)a*b/mod;</span><br><span class="line">ll ret=a*b-c*mod;</span><br><span class="line"><span class="keyword">if</span>(ret&lt;<span class="number">0</span>) ret+=mod;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ret&gt;=mod) ret-=mod;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实践证明，战果辉煌：$6pts -&gt; 94pts$ ！！！</p><p><img src="https://s2.ax1x.com/2019/03/30/ADFojS.png" alt></p><h2 id="优化2（正解）"><a href="#优化2（正解）" class="headerlink" title="优化2（正解）"></a>优化2（正解）</h2><p>虽然关于龟速乘的 $O(\log n)$ 的恶劣影响得到了一定遏制，不过，我还是好想 $AC$ 啊！</p><p><strong>通过办法1</strong> ：<del>打表</del> $\cdots$</p><p>正确 $AC$ 姿势如下：</p><ul><li><p>我们发现在 $Pollard-Rho$ 中如果长时间随机化而得不到结果，$gcd$带来的 $O(\log n)$ 还是很伤肾的！！那有没有办法优化呢？答案是肯定的。</p></li><li><p>在生成$x$的操作中，龟速乘<strong>所模的数就是$n$</strong>，而要求的就是$n$的某一个约数，即<strong>现在的模数并不是一个质数</strong>。</p></li><li><p>根据取模的性质：如果模数和被模的数都含有一个公约数，那么这次模运算的结果<strong>必然也会是这个公约数的倍数</strong>。所以如果我们将若干个$(y−x)$ 相乘，因为模数是 $n$ ，所以如果若干个$(y−x)$中有一个与$n$<strong>有公约数，最后的结果定然也会含有这个公约数</strong>。</p></li><li><p>所以可以多算几次$(y−x)$的乘积再来求$gcd$ （一般连续算$127$次再求一次$gcd$）。</p></li><li><p>不过$\cdots$，如果在不断尝试$x$的值时碰上一个环，就可能会还没算到$127$次就跳出这个环了，就无法得出答案；同时，可能$127$次计算之后，所有$(y−x)$的乘积都变成了$n$的倍数（即$\prod_{i=1}^{127} {(y-x)} \equiv<br>0 \pmod{n}$ ）</p></li><li><p>所以我们可以不仅在<strong>每计算$127$次之后求$gcd$、还要在倍增时（即判环时）求$gcd$</strong>，这样既维护了其正确性，又判了环！！</p></li><li><p>完整$AC$代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V inline void</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I inline int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B inline bool</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F1(i,a,b) for(rg i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F3(i,a,b,c) for(rg i=a;i&lt;=b;i+=c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ed putchar(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bl putchar(<span class="meta-string">' '</span>)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function">V <span class="title">read</span><span class="params">(TP &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TP f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">register</span> <span class="keyword">char</span> c=getchar();</span><br><span class="line"><span class="keyword">for</span>(;c&gt;<span class="string">'9'</span>||c&lt;<span class="string">'0'</span>;c=getchar()) <span class="keyword">if</span>(c==<span class="string">'-'</span>) f=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>);</span><br><span class="line">x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function">V <span class="title">print</span><span class="params">(TP x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">9</span>) print(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll n,ans;</span><br><span class="line">ll a[]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">61</span>,<span class="number">13</span>,<span class="number">17</span>&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> ll <span class="title">Gcd</span><span class="params">(TP a,TP b)</span> </span>&#123;<span class="keyword">return</span> !b?a:Gcd(b,a%b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a%=mod,b%=mod;</span><br><span class="line">ll c=(<span class="keyword">long</span> <span class="keyword">double</span>)a*b/mod;</span><br><span class="line">ll ret=a*b-c*mod;</span><br><span class="line"><span class="keyword">if</span>(ret&lt;<span class="number">0</span>) ret+=mod;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ret&gt;=mod) ret-=mod;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> ll <span class="title">Pow</span><span class="params">(TP a,TP b,TP p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(TP i=b;i;i&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=mul(ans,a,p);</span><br><span class="line">a=mul(a,a,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">B <span class="title">Miller_Robbin</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">ll d=n<span class="number">-1</span>;<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(d&amp;<span class="number">1</span>)) d&gt;&gt;=<span class="number">1</span>,++s;</span><br><span class="line"><span class="keyword">for</span>(rg i=<span class="number">0</span>;i&lt;=<span class="number">8</span> &amp;&amp; a[i]&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ll x=Pow(a[i],d,n),y=<span class="number">0</span>;</span><br><span class="line">F1(j,<span class="number">0</span>,s<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">y=mul(x,x,n);</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">1</span> &amp;&amp; x!=<span class="number">1</span> &amp;&amp; x!=(n<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">x=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Pollard_Rho</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">ll x=rand()%(n<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">ll y=rand()%(n<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">ll c=rand()%(n<span class="number">-2</span>)+<span class="number">1</span>;</span><br><span class="line">ll i=<span class="number">0</span>,k=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(++i)</span><br><span class="line">&#123;</span><br><span class="line">x=(mul(x,x,n)+c)%n;</span><br><span class="line">b=mul(b,<span class="built_in">abs</span>(y-x),n);</span><br><span class="line"><span class="keyword">if</span>(x==y || !b) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(!(i%<span class="number">127</span>) || i==k)</span><br><span class="line">&#123;</span><br><span class="line">ll d=Gcd(b,n);</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line"><span class="keyword">if</span>(i==k) y=x,k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">V <span class="title">Find</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=ans) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(Miller_Robbin(n)) &#123;ans=max(ans,n);<span class="keyword">return</span>;&#125;</span><br><span class="line">ll p=Pollard_Rho(n);</span><br><span class="line"><span class="keyword">while</span>(n%p==<span class="number">0</span>) n/=p;</span><br><span class="line">Find(p),Find(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read(T);srand(time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">read(n);Find(n);</span><br><span class="line"><span class="keyword">if</span>(ans==n) <span class="built_in">puts</span>(<span class="string">"Prime"</span>);</span><br><span class="line"><span class="keyword">else</span> print(ans),ed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$\text{Miller-Robbin}$ 与 $\text{Pollard Rho}$ 虽然都是随机算法，不过用起来是真的爽。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学，素数" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
</feed>
